<h1>Users</h1>

<h4>POST /v1/users</h4>
<p>
This operation starts the process of creating a new user. It expects the basic user information such as firstname, lastname, email, etc and will begin the process of signing up a new user by sending a confirmation link to the supplied email. If the supplied information is valid the server will respond with a <%= code(201) %> status. Any invalid information will cause the server to respond with a <%= code(400) %> status.
</p>
<h5>Example Request</h5>
<!-- Nav tabs -->
<ul class="nav nav-pills pull-right">
  <li class="active"><a href="#curl" data-toggle="tab">Curl</a></li>
  <li><a href="#java" data-toggle="tab">Java</a></li>
  <li><a href="#node" data-toggle="tab">Node</a></li>
  <li><a href="#python" data-toggle="tab">Python</a></li>
</ul>

<!-- Tab panes -->
<div class="tab-content">
  <div class="tab-pane active" id="curl">
    <pre><code class='http'>curl -X POST https://api.evercam.io/v1/users \
  -d "firstname=Joe" \
  -d "lastname=Bloggs" \
  -d "email=joe.bloggs@example.org" \
  -d "username=joeyb" \
  -d "country=us"
</code></pre>
<h5>Example Success Response</h5>
<pre><code class='json'>{
  "users": [{
    "id": "joeyb",
    "firstname": "Joe",
    "lastname": "Bloggs",
    "email": "joe.bloggs@example.org",
    "country": "us",
    "created_at": 1386582328,
    "updated_at": 1386582328,
    "confirmed_at": null
  }]
}
</code></pre>
<h5>Example Failure Response</h5>
<pre><code class='json'>{
  "message": [
    "Username already exists",
    ...
  ]
}
    </code></pre>
  </div>

  <div class="tab-pane" id="java">
    <pre><code class='java'>import io.evercam.*;
    </code></pre>
  </div>

  <div class="tab-pane" id="node">
    <pre><code class='javascript'>var evercam = require("evercam");
evercam.user.create({
    firstname: 'Joe',
    lastname: 'Bloggs',
    email: 'joe.bloggs@example.org',
    username: 'joeyb',
    country: 'us'
  },
  function (errors, user) {
    // asynchronously called
  }
);
    </code></pre>
    <h5>Example Success Response</h5>
    <pre><code class='json'>
{
  "id": "joeyb",
  "firstname": "Joe",
  "lastname": "Bloggs",
  "email": "joe.bloggs@example.org",
  "country": "us",
  "created_at": 1386582328,
  "updated_at": 1386582328,
  "confirmed_at": null
}
    </code></pre>
    <h5>Example Failure Response</h5>
    <pre><code class='json'>[Error: Username already exists]
    </code></pre>
  </div>

  <div class="tab-pane" id="python">
    <pre><code class='python'>import evercam
user = evercam.User.create_user({
  'firstname': 'Joe',
  'lastname': 'Bloggs',
  'email': 'joe.bloggs@example.org',
  'username': 'joeyb',
  'country': 'us'
})
    </code></pre>
    <h5>Example Success Response</h5>
    <pre><code class='json'>
&lt;evercam.User object&gt; JSON: {
  "id": "joeyb",
  "firstname": "Joe",
  "lastname": "Bloggs",
  "email": "joe.bloggs@example.org",
  "country": "us",
  "created_at": 1386582328,
  "updated_at": 1386582328,
  "confirmed_at": null
}
    </code></pre>
    <h5>Example Failure Response</h5>
    <pre><code class='python'>evercam.errors.UsernameAlreadyExists
    </code></pre>

  </div>
</div>

<h4>GET /v1/users/{id}/cameras</h4>
<p>
This operation returns the list of cameras a user currently has ownership of. It operates in both public access and protected access modes. If you do not provide any authentication information along with the request it will return all of the users public cameras. If you provide authentication information it will return the list of public cameras and cameras owner by the user that you have been granted view access on. Provided the user <strong>{id}</strong> exists the server will respond with a <%= code(200) %> status. If the username does not exist the server will respond with a <%= code(404) %> status.
<h5>Example Request</h5>
<!-- Nav tabs -->
<ul class="nav nav-pills pull-right">
  <li class="active"><a href="#curl1" data-toggle="tab">Curl</a></li>
  <li><a href="#java1" data-toggle="tab">Java</a></li>
  <li><a href="#node1" data-toggle="tab">Node</a></li>
  <li><a href="#python1" data-toggle="tab">Python</a></li>
</ul>

<!-- Tab panes -->
<div class="tab-content">
  <div class="tab-pane active" id="curl1">
    <pre><code class='http'>curl -X GET https://api.evercam.io/v1/users/{id}/cameras \
  -u {your-username}
    </code></pre>
    <h5>Example Response</h5>
    <pre><code class='json'>{
 "cameras": [{
    "id": "my-camera-name",
    "owner": "{your-username}",
    "created_at": 1387370779,
    "updated_at": 1387370779,
    "endpoints": ["http://127.0.0.1:8080"],
    "is_public": true,
    "snapshots": {
      "jpg": "/onvif/snapshot"
    },
    "auth": {
      "basic": {
        "username": "user1",
        "password": "abcde"
      }
    }
  },{
    "id": "my-other-camera",
    ...
  }]
}

    </code></pre>
  </div>

  <div class="tab-pane" id="java1">
    <pre><code class='java'>import io.evercam.*;
    </code></pre>
  </div>

  <div class="tab-pane" id="node1">
    <pre><code class='javascript'>var evercam = require("evercam");
 evercam.user.streams('joeyb', function (errors, streams) {
    // asynchronously called
  }
);
    </code></pre>
    <h5>Example Success Response</h5>
    <pre><code class='json'>[
  {
    "id": "my-camera-name",
    "owner": "joeyb",
    "created_at": 1387370779,
    "updated_at": 1387370779,
    "endpoints": ["http://127.0.0.1:8080"],
    "is_public": true,
    "snapshots": {
      "jpg": "/onvif/snapshot"
    },
    "auth": {
      "basic": {
        "username": "user1",
        "password": "abcde"
      }
    }
  },{
    "id": "my-other-camera",
    ...
  }
]
    </code></pre>
  </div>

  <div class="tab-pane" id="python1">
    <pre><code class='python'>import evercam
streams = evercam.Stream.by_user('joeyb')
    </code></pre>
    <h5>Example Success Response</h5>
    <pre><code class='json'>[
  &lt;evercam.Stream object&gt; JSON: {
    "id": "my-camera-name",
    "owner": "joeyb",
    "created_at": 1387370779,
    "updated_at": 1387370779,
    "endpoints": ["http://127.0.0.1:8080"],
    "is_public": true,
    "snapshots": {
      "jpg": "/onvif/snapshot"
    },
    "auth": {
      "basic": {
        "username": "user1",
        "password": "abcde"
      }
    }
  },
  &lt;evercam.Stream object&gt; { ... }
]
    </code></pre>
  </div>
</div>
